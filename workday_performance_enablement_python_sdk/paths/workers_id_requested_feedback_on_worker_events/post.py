# coding: utf-8

"""
    performanceEnablement

    The Performance Management service enables applications to access and create feedback about workers in the system.

    The version of the OpenAPI document: v5
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from workday_performance_enablement_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from workday_performance_enablement_python_sdk.api_response import AsyncGeneratorResponse
from workday_performance_enablement_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from workday_performance_enablement_python_sdk import schemas  # noqa: F401

from workday_performance_enablement_python_sdk.model.feedback_template2b4c8a6ca069100035b859a141200001 import FeedbackTemplate2b4c8a6ca069100035b859a141200001 as FeedbackTemplate2b4c8a6ca069100035b859a141200001Schema
from workday_performance_enablement_python_sdk.model.feedback_about2b4c8a6ca069100035b85907ae2c0002 import FeedbackAbout2b4c8a6ca069100035b85907ae2c0002 as FeedbackAbout2b4c8a6ca069100035b85907ae2c0002Schema
from workday_performance_enablement_python_sdk.model.business_process_parameters2b4c8a6ca069100035b85907ae2c0000 import BusinessProcessParameters2b4c8a6ca069100035b85907ae2c0000 as BusinessProcessParameters2b4c8a6ca069100035b85907ae2c0000Schema
from workday_performance_enablement_python_sdk.model.errormodelreference import ERRORMODELREFERENCE as ERRORMODELREFERENCESchema
from workday_performance_enablement_python_sdk.model.feedback_responders_ffdd5de32f7f100016dbb1b188d70000 import FeedbackRespondersFfdd5de32f7f100016dbb1b188d70000 as FeedbackRespondersFfdd5de32f7f100016dbb1b188d70000Schema
from workday_performance_enablement_python_sdk.model.requested_feedback_on_worker_event_detail2b4c8a6ca069100035b8586e16c20000 import RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000 as RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000Schema
from workday_performance_enablement_python_sdk.model.requested_feedback_question_ffdd5de32f7f1000144df0c21e640000 import RequestedFeedbackQuestionFfdd5de32f7f1000144df0c21e640000 as RequestedFeedbackQuestionFfdd5de32f7f1000144df0c21e640000Schema
from workday_performance_enablement_python_sdk.model.validationerrormodelreference import VALIDATIONERRORMODELREFERENCE as VALIDATIONERRORMODELREFERENCESchema

from workday_performance_enablement_python_sdk.type.feedback_responders_ffdd5de32f7f100016dbb1b188d70000 import FeedbackRespondersFfdd5de32f7f100016dbb1b188d70000
from workday_performance_enablement_python_sdk.type.business_process_parameters2b4c8a6ca069100035b85907ae2c0000 import BusinessProcessParameters2b4c8a6ca069100035b85907ae2c0000
from workday_performance_enablement_python_sdk.type.feedback_about2b4c8a6ca069100035b85907ae2c0002 import FeedbackAbout2b4c8a6ca069100035b85907ae2c0002
from workday_performance_enablement_python_sdk.type.feedback_template2b4c8a6ca069100035b859a141200001 import FeedbackTemplate2b4c8a6ca069100035b859a141200001
from workday_performance_enablement_python_sdk.type.errormodelreference import ERRORMODELREFERENCE
from workday_performance_enablement_python_sdk.type.requested_feedback_question_ffdd5de32f7f1000144df0c21e640000 import RequestedFeedbackQuestionFfdd5de32f7f1000144df0c21e640000
from workday_performance_enablement_python_sdk.type.requested_feedback_on_worker_event_detail2b4c8a6ca069100035b8586e16c20000 import RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000
from workday_performance_enablement_python_sdk.type.validationerrormodelreference import VALIDATIONERRORMODELREFERENCE

from ...api_client import Dictionary
from workday_performance_enablement_python_sdk.pydantic.errormodelreference import ERRORMODELREFERENCE as ERRORMODELREFERENCEPydantic
from workday_performance_enablement_python_sdk.pydantic.requested_feedback_question_ffdd5de32f7f1000144df0c21e640000 import RequestedFeedbackQuestionFfdd5de32f7f1000144df0c21e640000 as RequestedFeedbackQuestionFfdd5de32f7f1000144df0c21e640000Pydantic
from workday_performance_enablement_python_sdk.pydantic.feedback_template2b4c8a6ca069100035b859a141200001 import FeedbackTemplate2b4c8a6ca069100035b859a141200001 as FeedbackTemplate2b4c8a6ca069100035b859a141200001Pydantic
from workday_performance_enablement_python_sdk.pydantic.business_process_parameters2b4c8a6ca069100035b85907ae2c0000 import BusinessProcessParameters2b4c8a6ca069100035b85907ae2c0000 as BusinessProcessParameters2b4c8a6ca069100035b85907ae2c0000Pydantic
from workday_performance_enablement_python_sdk.pydantic.requested_feedback_on_worker_event_detail2b4c8a6ca069100035b8586e16c20000 import RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000 as RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000Pydantic
from workday_performance_enablement_python_sdk.pydantic.feedback_responders_ffdd5de32f7f100016dbb1b188d70000 import FeedbackRespondersFfdd5de32f7f100016dbb1b188d70000 as FeedbackRespondersFfdd5de32f7f100016dbb1b188d70000Pydantic
from workday_performance_enablement_python_sdk.pydantic.feedback_about2b4c8a6ca069100035b85907ae2c0002 import FeedbackAbout2b4c8a6ca069100035b85907ae2c0002 as FeedbackAbout2b4c8a6ca069100035b85907ae2c0002Pydantic
from workday_performance_enablement_python_sdk.pydantic.validationerrormodelreference import VALIDATIONERRORMODELREFERENCE as VALIDATIONERRORMODELREFERENCEPydantic

from . import path

# Path params
IDSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'ID': typing.Union[IDSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_id = api_client.PathParameter(
    name="ID",
    style=api_client.ParameterStyle.SIMPLE,
    schema=IDSchema,
    required=True,
)
# body param
SchemaForRequestBodyApplicationJson = RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000Schema


request_body_requested_feedback_on_worker_event_detail2b4c8a6ca069100035b8586e16c20000 = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
    required=True,
)
SchemaFor201ResponseBodyApplicationJson = RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000Schema


@dataclass
class ApiResponseFor201(api_client.ApiResponse):
    body: RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000


@dataclass
class ApiResponseFor201Async(api_client.AsyncApiResponse):
    body: RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000


_response_for_201 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor201,
    response_cls_async=ApiResponseFor201Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor201ResponseBodyApplicationJson),
    },
)
SchemaFor400ResponseBodyApplicationJson = VALIDATIONERRORMODELREFERENCESchema


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: VALIDATIONERRORMODELREFERENCE


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: VALIDATIONERRORMODELREFERENCE


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
    },
)
SchemaFor401ResponseBodyApplicationJson = VALIDATIONERRORMODELREFERENCESchema


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: VALIDATIONERRORMODELREFERENCE


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: VALIDATIONERRORMODELREFERENCE


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor401ResponseBodyApplicationJson),
    },
)
SchemaFor403ResponseBodyApplicationJson = VALIDATIONERRORMODELREFERENCESchema


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: VALIDATIONERRORMODELREFERENCE


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: VALIDATIONERRORMODELREFERENCE


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationJson),
    },
)
SchemaFor404ResponseBodyApplicationJson = VALIDATIONERRORMODELREFERENCESchema


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    body: VALIDATIONERRORMODELREFERENCE


@dataclass
class ApiResponseFor404Async(api_client.AsyncApiResponse):
    body: VALIDATIONERRORMODELREFERENCE


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    response_cls_async=ApiResponseFor404Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationJson),
    },
)
SchemaFor0ResponseBodyApplicationJson = ERRORMODELREFERENCESchema


@dataclass
class ApiResponseForDefault(api_client.ApiResponse):
    body: ERRORMODELREFERENCE


@dataclass
class ApiResponseForDefaultAsync(api_client.AsyncApiResponse):
    body: ERRORMODELREFERENCE


_response_for_default = api_client.OpenApiResponse(
    response_cls=ApiResponseForDefault,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor0ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '201': _response_for_201,
    '400': _response_for_400,
    '401': _response_for_401,
    '403': _response_for_403,
    '404': _response_for_404,
    'default': _response_for_default,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _request_feedback_on_worker_events_mapped_args(
        self,
        id: str,
        feedback_about: typing.Optional[FeedbackAbout2b4c8a6ca069100035b85907ae2c0002] = None,
        feedback_confidential: typing.Optional[bool] = None,
        feedback_overall_status: typing.Optional[str] = None,
        show_feedback_provider_name: typing.Optional[bool] = None,
        request_date: typing.Optional[date] = None,
        expiration_date: typing.Optional[date] = None,
        feedback_questions: typing.Optional[typing.List[RequestedFeedbackQuestionFfdd5de32f7f1000144df0c21e640000]] = None,
        feedback_template: typing.Optional[FeedbackTemplate2b4c8a6ca069100035b859a141200001] = None,
        feedback_responders: typing.Optional[typing.List[FeedbackRespondersFfdd5de32f7f100016dbb1b188d70000]] = None,
        business_process_parameters: typing.Optional[BusinessProcessParameters2b4c8a6ca069100035b85907ae2c0000] = None,
        descriptor: typing.Optional[str] = None,
        id: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _path_params = {}
        _body = {}
        if feedback_about is not None:
            _body["feedbackAbout"] = feedback_about
        if feedback_confidential is not None:
            _body["feedbackConfidential"] = feedback_confidential
        if feedback_overall_status is not None:
            _body["feedbackOverallStatus"] = feedback_overall_status
        if show_feedback_provider_name is not None:
            _body["showFeedbackProviderName"] = show_feedback_provider_name
        if request_date is not None:
            _body["requestDate"] = request_date
        if expiration_date is not None:
            _body["expirationDate"] = expiration_date
        if feedback_questions is not None:
            _body["feedbackQuestions"] = feedback_questions
        if feedback_template is not None:
            _body["feedbackTemplate"] = feedback_template
        if feedback_responders is not None:
            _body["feedbackResponders"] = feedback_responders
        if business_process_parameters is not None:
            _body["businessProcessParameters"] = business_process_parameters
        if descriptor is not None:
            _body["descriptor"] = descriptor
        if id is not None:
            _body["id"] = id
        args.body = _body
        if id is not None:
            _path_params["ID"] = id
        args.path = _path_params
        return args

    async def _arequest_feedback_on_worker_events_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        ApiResponseForDefaultAsync,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Not applicable.
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/workers/{ID}/requestedFeedbackOnWorkerEvents',
            body=body,
            headers=_headers,
        )
        serialized_data = request_body_requested_feedback_on_worker_event_detail2b4c8a6ca069100035b8586e16c20000.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            default_response = _status_code_to_response.get('default')
            if default_response:
                api_response = default_response.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
            else:
                api_response = api_client.ApiResponseWithoutDeserializationAsync(
                    response=response.http_response,
                    round_trip_time=response.round_trip_time,
                    status=response.http_response.status,
                    headers=response.http_response.headers,
                )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _request_feedback_on_worker_events_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor201,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Not applicable.
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/workers/{ID}/requestedFeedbackOnWorkerEvents',
            body=body,
            headers=_headers,
        )
        serialized_data = request_body_requested_feedback_on_worker_event_detail2b4c8a6ca069100035b8586e16c20000.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            default_response = _status_code_to_response.get('default')
            if default_response:
                api_response = default_response.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(
                    response=response.http_response,
                    round_trip_time=response.round_trip_time,
                    status=response.http_response.status,
                    headers=response.http_response.headers,
                )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class RequestFeedbackOnWorkerEventsRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def arequest_feedback_on_worker_events(
        self,
        id: str,
        feedback_about: typing.Optional[FeedbackAbout2b4c8a6ca069100035b85907ae2c0002] = None,
        feedback_confidential: typing.Optional[bool] = None,
        feedback_overall_status: typing.Optional[str] = None,
        show_feedback_provider_name: typing.Optional[bool] = None,
        request_date: typing.Optional[date] = None,
        expiration_date: typing.Optional[date] = None,
        feedback_questions: typing.Optional[typing.List[RequestedFeedbackQuestionFfdd5de32f7f1000144df0c21e640000]] = None,
        feedback_template: typing.Optional[FeedbackTemplate2b4c8a6ca069100035b859a141200001] = None,
        feedback_responders: typing.Optional[typing.List[FeedbackRespondersFfdd5de32f7f100016dbb1b188d70000]] = None,
        business_process_parameters: typing.Optional[BusinessProcessParameters2b4c8a6ca069100035b85907ae2c0000] = None,
        descriptor: typing.Optional[str] = None,
        id: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        ApiResponseForDefaultAsync,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._request_feedback_on_worker_events_mapped_args(
            body=body,
            id=id,
            feedback_about=feedback_about,
            feedback_confidential=feedback_confidential,
            feedback_overall_status=feedback_overall_status,
            show_feedback_provider_name=show_feedback_provider_name,
            request_date=request_date,
            expiration_date=expiration_date,
            feedback_questions=feedback_questions,
            feedback_template=feedback_template,
            feedback_responders=feedback_responders,
            business_process_parameters=business_process_parameters,
            descriptor=descriptor,
            id=id,
        )
        return await self._arequest_feedback_on_worker_events_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def request_feedback_on_worker_events(
        self,
        id: str,
        feedback_about: typing.Optional[FeedbackAbout2b4c8a6ca069100035b85907ae2c0002] = None,
        feedback_confidential: typing.Optional[bool] = None,
        feedback_overall_status: typing.Optional[str] = None,
        show_feedback_provider_name: typing.Optional[bool] = None,
        request_date: typing.Optional[date] = None,
        expiration_date: typing.Optional[date] = None,
        feedback_questions: typing.Optional[typing.List[RequestedFeedbackQuestionFfdd5de32f7f1000144df0c21e640000]] = None,
        feedback_template: typing.Optional[FeedbackTemplate2b4c8a6ca069100035b859a141200001] = None,
        feedback_responders: typing.Optional[typing.List[FeedbackRespondersFfdd5de32f7f100016dbb1b188d70000]] = None,
        business_process_parameters: typing.Optional[BusinessProcessParameters2b4c8a6ca069100035b85907ae2c0000] = None,
        descriptor: typing.Optional[str] = None,
        id: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor201,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._request_feedback_on_worker_events_mapped_args(
            body=body,
            id=id,
            feedback_about=feedback_about,
            feedback_confidential=feedback_confidential,
            feedback_overall_status=feedback_overall_status,
            show_feedback_provider_name=show_feedback_provider_name,
            request_date=request_date,
            expiration_date=expiration_date,
            feedback_questions=feedback_questions,
            feedback_template=feedback_template,
            feedback_responders=feedback_responders,
            business_process_parameters=business_process_parameters,
            descriptor=descriptor,
            id=id,
        )
        return self._request_feedback_on_worker_events_oapg(
            body=args.body,
            path_params=args.path,
        )

class RequestFeedbackOnWorkerEvents(BaseApi):

    async def arequest_feedback_on_worker_events(
        self,
        id: str,
        feedback_about: typing.Optional[FeedbackAbout2b4c8a6ca069100035b85907ae2c0002] = None,
        feedback_confidential: typing.Optional[bool] = None,
        feedback_overall_status: typing.Optional[str] = None,
        show_feedback_provider_name: typing.Optional[bool] = None,
        request_date: typing.Optional[date] = None,
        expiration_date: typing.Optional[date] = None,
        feedback_questions: typing.Optional[typing.List[RequestedFeedbackQuestionFfdd5de32f7f1000144df0c21e640000]] = None,
        feedback_template: typing.Optional[FeedbackTemplate2b4c8a6ca069100035b859a141200001] = None,
        feedback_responders: typing.Optional[typing.List[FeedbackRespondersFfdd5de32f7f100016dbb1b188d70000]] = None,
        business_process_parameters: typing.Optional[BusinessProcessParameters2b4c8a6ca069100035b85907ae2c0000] = None,
        descriptor: typing.Optional[str] = None,
        id: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000Pydantic:
        raw_response = await self.raw.arequest_feedback_on_worker_events(
            body=body,
            id=id,
            feedback_about=feedback_about,
            feedback_confidential=feedback_confidential,
            feedback_overall_status=feedback_overall_status,
            show_feedback_provider_name=show_feedback_provider_name,
            request_date=request_date,
            expiration_date=expiration_date,
            feedback_questions=feedback_questions,
            feedback_template=feedback_template,
            feedback_responders=feedback_responders,
            business_process_parameters=business_process_parameters,
            descriptor=descriptor,
            id=id,
            **kwargs,
        )
        if validate:
            return RootModel[RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000Pydantic](raw_response.body).root
        return api_client.construct_model_instance(RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000Pydantic, raw_response.body)
    
    
    def request_feedback_on_worker_events(
        self,
        id: str,
        feedback_about: typing.Optional[FeedbackAbout2b4c8a6ca069100035b85907ae2c0002] = None,
        feedback_confidential: typing.Optional[bool] = None,
        feedback_overall_status: typing.Optional[str] = None,
        show_feedback_provider_name: typing.Optional[bool] = None,
        request_date: typing.Optional[date] = None,
        expiration_date: typing.Optional[date] = None,
        feedback_questions: typing.Optional[typing.List[RequestedFeedbackQuestionFfdd5de32f7f1000144df0c21e640000]] = None,
        feedback_template: typing.Optional[FeedbackTemplate2b4c8a6ca069100035b859a141200001] = None,
        feedback_responders: typing.Optional[typing.List[FeedbackRespondersFfdd5de32f7f100016dbb1b188d70000]] = None,
        business_process_parameters: typing.Optional[BusinessProcessParameters2b4c8a6ca069100035b85907ae2c0000] = None,
        descriptor: typing.Optional[str] = None,
        id: typing.Optional[str] = None,
        validate: bool = False,
    ) -> RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000Pydantic:
        raw_response = self.raw.request_feedback_on_worker_events(
            body=body,
            id=id,
            feedback_about=feedback_about,
            feedback_confidential=feedback_confidential,
            feedback_overall_status=feedback_overall_status,
            show_feedback_provider_name=show_feedback_provider_name,
            request_date=request_date,
            expiration_date=expiration_date,
            feedback_questions=feedback_questions,
            feedback_template=feedback_template,
            feedback_responders=feedback_responders,
            business_process_parameters=business_process_parameters,
            descriptor=descriptor,
            id=id,
        )
        if validate:
            return RootModel[RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000Pydantic](raw_response.body).root
        return api_client.construct_model_instance(RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000Pydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        id: str,
        feedback_about: typing.Optional[FeedbackAbout2b4c8a6ca069100035b85907ae2c0002] = None,
        feedback_confidential: typing.Optional[bool] = None,
        feedback_overall_status: typing.Optional[str] = None,
        show_feedback_provider_name: typing.Optional[bool] = None,
        request_date: typing.Optional[date] = None,
        expiration_date: typing.Optional[date] = None,
        feedback_questions: typing.Optional[typing.List[RequestedFeedbackQuestionFfdd5de32f7f1000144df0c21e640000]] = None,
        feedback_template: typing.Optional[FeedbackTemplate2b4c8a6ca069100035b859a141200001] = None,
        feedback_responders: typing.Optional[typing.List[FeedbackRespondersFfdd5de32f7f100016dbb1b188d70000]] = None,
        business_process_parameters: typing.Optional[BusinessProcessParameters2b4c8a6ca069100035b85907ae2c0000] = None,
        descriptor: typing.Optional[str] = None,
        id: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        ApiResponseForDefaultAsync,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._request_feedback_on_worker_events_mapped_args(
            body=body,
            id=id,
            feedback_about=feedback_about,
            feedback_confidential=feedback_confidential,
            feedback_overall_status=feedback_overall_status,
            show_feedback_provider_name=show_feedback_provider_name,
            request_date=request_date,
            expiration_date=expiration_date,
            feedback_questions=feedback_questions,
            feedback_template=feedback_template,
            feedback_responders=feedback_responders,
            business_process_parameters=business_process_parameters,
            descriptor=descriptor,
            id=id,
        )
        return await self._arequest_feedback_on_worker_events_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def post(
        self,
        id: str,
        feedback_about: typing.Optional[FeedbackAbout2b4c8a6ca069100035b85907ae2c0002] = None,
        feedback_confidential: typing.Optional[bool] = None,
        feedback_overall_status: typing.Optional[str] = None,
        show_feedback_provider_name: typing.Optional[bool] = None,
        request_date: typing.Optional[date] = None,
        expiration_date: typing.Optional[date] = None,
        feedback_questions: typing.Optional[typing.List[RequestedFeedbackQuestionFfdd5de32f7f1000144df0c21e640000]] = None,
        feedback_template: typing.Optional[FeedbackTemplate2b4c8a6ca069100035b859a141200001] = None,
        feedback_responders: typing.Optional[typing.List[FeedbackRespondersFfdd5de32f7f100016dbb1b188d70000]] = None,
        business_process_parameters: typing.Optional[BusinessProcessParameters2b4c8a6ca069100035b85907ae2c0000] = None,
        descriptor: typing.Optional[str] = None,
        id: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor201,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._request_feedback_on_worker_events_mapped_args(
            body=body,
            id=id,
            feedback_about=feedback_about,
            feedback_confidential=feedback_confidential,
            feedback_overall_status=feedback_overall_status,
            show_feedback_provider_name=show_feedback_provider_name,
            request_date=request_date,
            expiration_date=expiration_date,
            feedback_questions=feedback_questions,
            feedback_template=feedback_template,
            feedback_responders=feedback_responders,
            business_process_parameters=business_process_parameters,
            descriptor=descriptor,
            id=id,
        )
        return self._request_feedback_on_worker_events_oapg(
            body=args.body,
            path_params=args.path,
        )

