# coding: utf-8

"""
    performanceEnablement

    The Performance Management service enables applications to access and create feedback about workers in the system.

    The version of the OpenAPI document: v5
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from workday_performance_enablement_python_sdk import schemas  # noqa: F401


class GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_0(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    dueDate = schemas.DateSchema
                    feedbackGivenDate = schemas.DateSchema
                    feedbackCreationDate = schemas.DateSchema
                
                    @staticmethod
                    def requestedBy() -> typing.Type['RequestedByD396fd5bffec1000100f44a5808f0006']:
                        return RequestedByD396fd5bffec1000100f44a5808f0006
                
                    @staticmethod
                    def aboutWorker() -> typing.Type['AboutWorkerD396fd5bffec1000100f44a5808f0005']:
                        return AboutWorkerD396fd5bffec1000100f44a5808f0005
                    expirationDate = schemas.DateSchema
                    displayNameofResponder = schemas.BoolSchema
                    
                    
                    class feedbackComments(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['RequestedFeedbackCommentsD396fd5bffec10001393477e77870000']:
                                return RequestedFeedbackCommentsD396fd5bffec10001393477e77870000
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['RequestedFeedbackCommentsD396fd5bffec10001393477e77870000'], typing.List['RequestedFeedbackCommentsD396fd5bffec10001393477e77870000']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'feedbackComments':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'RequestedFeedbackCommentsD396fd5bffec10001393477e77870000':
                            return super().__getitem__(i)
                
                    @staticmethod
                    def businessProcessParameters() -> typing.Type['BusinessProcessParametersD396fd5bffec1000100f440bde4c0001']:
                        return BusinessProcessParametersD396fd5bffec1000100f440bde4c0001
                    feedbackPrivate = schemas.BoolSchema
                    feedbackConfidential = schemas.BoolSchema
                    id = schemas.StrSchema
                    descriptor = schemas.StrSchema
                    __annotations__ = {
                        "dueDate": dueDate,
                        "feedbackGivenDate": feedbackGivenDate,
                        "feedbackCreationDate": feedbackCreationDate,
                        "requestedBy": requestedBy,
                        "aboutWorker": aboutWorker,
                        "expirationDate": expirationDate,
                        "displayNameofResponder": displayNameofResponder,
                        "feedbackComments": feedbackComments,
                        "businessProcessParameters": businessProcessParameters,
                        "feedbackPrivate": feedbackPrivate,
                        "feedbackConfidential": feedbackConfidential,
                        "id": id,
                        "descriptor": descriptor,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["dueDate"]) -> MetaOapg.properties.dueDate: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["feedbackGivenDate"]) -> MetaOapg.properties.feedbackGivenDate: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["feedbackCreationDate"]) -> MetaOapg.properties.feedbackCreationDate: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["requestedBy"]) -> 'RequestedByD396fd5bffec1000100f44a5808f0006': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["aboutWorker"]) -> 'AboutWorkerD396fd5bffec1000100f44a5808f0005': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["expirationDate"]) -> MetaOapg.properties.expirationDate: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["displayNameofResponder"]) -> MetaOapg.properties.displayNameofResponder: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["feedbackComments"]) -> MetaOapg.properties.feedbackComments: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["businessProcessParameters"]) -> 'BusinessProcessParametersD396fd5bffec1000100f440bde4c0001': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["feedbackPrivate"]) -> MetaOapg.properties.feedbackPrivate: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["feedbackConfidential"]) -> MetaOapg.properties.feedbackConfidential: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["descriptor"]) -> MetaOapg.properties.descriptor: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["dueDate", "feedbackGivenDate", "feedbackCreationDate", "requestedBy", "aboutWorker", "expirationDate", "displayNameofResponder", "feedbackComments", "businessProcessParameters", "feedbackPrivate", "feedbackConfidential", "id", "descriptor", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["dueDate"]) -> typing.Union[MetaOapg.properties.dueDate, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["feedbackGivenDate"]) -> typing.Union[MetaOapg.properties.feedbackGivenDate, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["feedbackCreationDate"]) -> typing.Union[MetaOapg.properties.feedbackCreationDate, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["requestedBy"]) -> typing.Union['RequestedByD396fd5bffec1000100f44a5808f0006', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["aboutWorker"]) -> typing.Union['AboutWorkerD396fd5bffec1000100f44a5808f0005', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["expirationDate"]) -> typing.Union[MetaOapg.properties.expirationDate, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["displayNameofResponder"]) -> typing.Union[MetaOapg.properties.displayNameofResponder, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["feedbackComments"]) -> typing.Union[MetaOapg.properties.feedbackComments, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["businessProcessParameters"]) -> typing.Union['BusinessProcessParametersD396fd5bffec1000100f440bde4c0001', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["feedbackPrivate"]) -> typing.Union[MetaOapg.properties.feedbackPrivate, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["feedbackConfidential"]) -> typing.Union[MetaOapg.properties.feedbackConfidential, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["descriptor"]) -> typing.Union[MetaOapg.properties.descriptor, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dueDate", "feedbackGivenDate", "feedbackCreationDate", "requestedBy", "aboutWorker", "expirationDate", "displayNameofResponder", "feedbackComments", "businessProcessParameters", "feedbackPrivate", "feedbackConfidential", "id", "descriptor", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                dueDate: typing.Union[MetaOapg.properties.dueDate, str, date, schemas.Unset] = schemas.unset,
                feedbackGivenDate: typing.Union[MetaOapg.properties.feedbackGivenDate, str, date, schemas.Unset] = schemas.unset,
                feedbackCreationDate: typing.Union[MetaOapg.properties.feedbackCreationDate, str, date, schemas.Unset] = schemas.unset,
                requestedBy: typing.Union['RequestedByD396fd5bffec1000100f44a5808f0006', schemas.Unset] = schemas.unset,
                aboutWorker: typing.Union['AboutWorkerD396fd5bffec1000100f44a5808f0005', schemas.Unset] = schemas.unset,
                expirationDate: typing.Union[MetaOapg.properties.expirationDate, str, date, schemas.Unset] = schemas.unset,
                displayNameofResponder: typing.Union[MetaOapg.properties.displayNameofResponder, bool, schemas.Unset] = schemas.unset,
                feedbackComments: typing.Union[MetaOapg.properties.feedbackComments, list, tuple, schemas.Unset] = schemas.unset,
                businessProcessParameters: typing.Union['BusinessProcessParametersD396fd5bffec1000100f440bde4c0001', schemas.Unset] = schemas.unset,
                feedbackPrivate: typing.Union[MetaOapg.properties.feedbackPrivate, bool, schemas.Unset] = schemas.unset,
                feedbackConfidential: typing.Union[MetaOapg.properties.feedbackConfidential, bool, schemas.Unset] = schemas.unset,
                id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                descriptor: typing.Union[MetaOapg.properties.descriptor, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_0':
                return super().__new__(
                    cls,
                    *args,
                    dueDate=dueDate,
                    feedbackGivenDate=feedbackGivenDate,
                    feedbackCreationDate=feedbackCreationDate,
                    requestedBy=requestedBy,
                    aboutWorker=aboutWorker,
                    expirationDate=expirationDate,
                    displayNameofResponder=displayNameofResponder,
                    feedbackComments=feedbackComments,
                    businessProcessParameters=businessProcessParameters,
                    feedbackPrivate=feedbackPrivate,
                    feedbackConfidential=feedbackConfidential,
                    id=id,
                    descriptor=descriptor,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.all_of_0,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from workday_performance_enablement_python_sdk.model.about_worker_d396fd5bffec1000100f44a5808f0005 import AboutWorkerD396fd5bffec1000100f44a5808f0005
from workday_performance_enablement_python_sdk.model.business_process_parameters_d396fd5bffec1000100f440bde4c0001 import BusinessProcessParametersD396fd5bffec1000100f440bde4c0001
from workday_performance_enablement_python_sdk.model.requested_by_d396fd5bffec1000100f44a5808f0006 import RequestedByD396fd5bffec1000100f44a5808f0006
from workday_performance_enablement_python_sdk.model.requested_feedback_comments_d396fd5bffec10001393477e77870000 import RequestedFeedbackCommentsD396fd5bffec10001393477e77870000
