# coding: utf-8

"""
    performanceEnablement

    The Performance Management service enables applications to access and create feedback about workers in the system.

    The version of the OpenAPI document: v5
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from workday_performance_enablement_python_sdk import schemas  # noqa: F401


class RequestedFeedbackQuestionFfdd5de32f7f1000144df0c21e640000(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_0(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class relatesTo(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['TalentTagFfdd5de32f7f100016c88e016ad20000']:
                                return TalentTagFfdd5de32f7f100016c88e016ad20000
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['TalentTagFfdd5de32f7f100016c88e016ad20000'], typing.List['TalentTagFfdd5de32f7f100016c88e016ad20000']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'relatesTo':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'TalentTagFfdd5de32f7f100016c88e016ad20000':
                            return super().__getitem__(i)
                    question = schemas.StrSchema
                
                    @staticmethod
                    def questionType() -> typing.Type['QuestionTypeFfdd5de32f7f1000144df15bb77b0001']:
                        return QuestionTypeFfdd5de32f7f1000144df15bb77b0001
                    
                    
                    class feedbackResponse(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['FeedbackResponse2f703c317dc910001bd2de83d1590000']:
                                return FeedbackResponse2f703c317dc910001bd2de83d1590000
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['FeedbackResponse2f703c317dc910001bd2de83d1590000'], typing.List['FeedbackResponse2f703c317dc910001bd2de83d1590000']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'feedbackResponse':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'FeedbackResponse2f703c317dc910001bd2de83d1590000':
                            return super().__getitem__(i)
                    
                    
                    class questionMultipleChoiceAnswers(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['QuestionMultipleChoiceFfdd5de32f7f100016c2c1e768f40000']:
                                return QuestionMultipleChoiceFfdd5de32f7f100016c2c1e768f40000
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['QuestionMultipleChoiceFfdd5de32f7f100016c2c1e768f40000'], typing.List['QuestionMultipleChoiceFfdd5de32f7f100016c2c1e768f40000']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'questionMultipleChoiceAnswers':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'QuestionMultipleChoiceFfdd5de32f7f100016c2c1e768f40000':
                            return super().__getitem__(i)
                    id = schemas.StrSchema
                    descriptor = schemas.StrSchema
                    __annotations__ = {
                        "relatesTo": relatesTo,
                        "question": question,
                        "questionType": questionType,
                        "feedbackResponse": feedbackResponse,
                        "questionMultipleChoiceAnswers": questionMultipleChoiceAnswers,
                        "id": id,
                        "descriptor": descriptor,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["relatesTo"]) -> MetaOapg.properties.relatesTo: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["question"]) -> MetaOapg.properties.question: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["questionType"]) -> 'QuestionTypeFfdd5de32f7f1000144df15bb77b0001': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["feedbackResponse"]) -> MetaOapg.properties.feedbackResponse: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["questionMultipleChoiceAnswers"]) -> MetaOapg.properties.questionMultipleChoiceAnswers: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["descriptor"]) -> MetaOapg.properties.descriptor: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["relatesTo", "question", "questionType", "feedbackResponse", "questionMultipleChoiceAnswers", "id", "descriptor", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["relatesTo"]) -> typing.Union[MetaOapg.properties.relatesTo, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["question"]) -> typing.Union[MetaOapg.properties.question, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["questionType"]) -> typing.Union['QuestionTypeFfdd5de32f7f1000144df15bb77b0001', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["feedbackResponse"]) -> typing.Union[MetaOapg.properties.feedbackResponse, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["questionMultipleChoiceAnswers"]) -> typing.Union[MetaOapg.properties.questionMultipleChoiceAnswers, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["descriptor"]) -> typing.Union[MetaOapg.properties.descriptor, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["relatesTo", "question", "questionType", "feedbackResponse", "questionMultipleChoiceAnswers", "id", "descriptor", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                relatesTo: typing.Union[MetaOapg.properties.relatesTo, list, tuple, schemas.Unset] = schemas.unset,
                question: typing.Union[MetaOapg.properties.question, str, schemas.Unset] = schemas.unset,
                questionType: typing.Union['QuestionTypeFfdd5de32f7f1000144df15bb77b0001', schemas.Unset] = schemas.unset,
                feedbackResponse: typing.Union[MetaOapg.properties.feedbackResponse, list, tuple, schemas.Unset] = schemas.unset,
                questionMultipleChoiceAnswers: typing.Union[MetaOapg.properties.questionMultipleChoiceAnswers, list, tuple, schemas.Unset] = schemas.unset,
                id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                descriptor: typing.Union[MetaOapg.properties.descriptor, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_0':
                return super().__new__(
                    cls,
                    *args,
                    relatesTo=relatesTo,
                    question=question,
                    questionType=questionType,
                    feedbackResponse=feedbackResponse,
                    questionMultipleChoiceAnswers=questionMultipleChoiceAnswers,
                    id=id,
                    descriptor=descriptor,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.all_of_0,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RequestedFeedbackQuestionFfdd5de32f7f1000144df0c21e640000':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from workday_performance_enablement_python_sdk.model.feedback_response2f703c317dc910001bd2de83d1590000 import FeedbackResponse2f703c317dc910001bd2de83d1590000
from workday_performance_enablement_python_sdk.model.question_multiple_choice_ffdd5de32f7f100016c2c1e768f40000 import QuestionMultipleChoiceFfdd5de32f7f100016c2c1e768f40000
from workday_performance_enablement_python_sdk.model.question_type_ffdd5de32f7f1000144df15bb77b0001 import QuestionTypeFfdd5de32f7f1000144df15bb77b0001
from workday_performance_enablement_python_sdk.model.talent_tag_ffdd5de32f7f100016c88e016ad20000 import TalentTagFfdd5de32f7f100016c88e016ad20000
