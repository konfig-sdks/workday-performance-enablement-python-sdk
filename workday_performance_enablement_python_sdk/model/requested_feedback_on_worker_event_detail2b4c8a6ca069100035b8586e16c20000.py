# coding: utf-8

"""
    performanceEnablement

    The Performance Management service enables applications to access and create feedback about workers in the system.

    The version of the OpenAPI document: v5
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from workday_performance_enablement_python_sdk import schemas  # noqa: F401


class RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_0(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "feedbackResponders",
                }
                
                class properties:
                
                    @staticmethod
                    def feedbackAbout() -> typing.Type['FeedbackAbout2b4c8a6ca069100035b85907ae2c0002']:
                        return FeedbackAbout2b4c8a6ca069100035b85907ae2c0002
                    feedbackConfidential = schemas.BoolSchema
                    feedbackOverallStatus = schemas.StrSchema
                    showFeedbackProviderName = schemas.BoolSchema
                    requestDate = schemas.DateSchema
                    expirationDate = schemas.DateSchema
                    
                    
                    class feedbackQuestions(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['RequestedFeedbackQuestionFfdd5de32f7f1000144df0c21e640000']:
                                return RequestedFeedbackQuestionFfdd5de32f7f1000144df0c21e640000
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['RequestedFeedbackQuestionFfdd5de32f7f1000144df0c21e640000'], typing.List['RequestedFeedbackQuestionFfdd5de32f7f1000144df0c21e640000']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'feedbackQuestions':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'RequestedFeedbackQuestionFfdd5de32f7f1000144df0c21e640000':
                            return super().__getitem__(i)
                
                    @staticmethod
                    def feedbackTemplate() -> typing.Type['FeedbackTemplate2b4c8a6ca069100035b859a141200001']:
                        return FeedbackTemplate2b4c8a6ca069100035b859a141200001
                    
                    
                    class feedbackResponders(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['FeedbackRespondersFfdd5de32f7f100016dbb1b188d70000']:
                                return FeedbackRespondersFfdd5de32f7f100016dbb1b188d70000
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['FeedbackRespondersFfdd5de32f7f100016dbb1b188d70000'], typing.List['FeedbackRespondersFfdd5de32f7f100016dbb1b188d70000']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'feedbackResponders':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'FeedbackRespondersFfdd5de32f7f100016dbb1b188d70000':
                            return super().__getitem__(i)
                
                    @staticmethod
                    def businessProcessParameters() -> typing.Type['BusinessProcessParameters2b4c8a6ca069100035b85907ae2c0000']:
                        return BusinessProcessParameters2b4c8a6ca069100035b85907ae2c0000
                    descriptor = schemas.StrSchema
                    id = schemas.StrSchema
                    __annotations__ = {
                        "feedbackAbout": feedbackAbout,
                        "feedbackConfidential": feedbackConfidential,
                        "feedbackOverallStatus": feedbackOverallStatus,
                        "showFeedbackProviderName": showFeedbackProviderName,
                        "requestDate": requestDate,
                        "expirationDate": expirationDate,
                        "feedbackQuestions": feedbackQuestions,
                        "feedbackTemplate": feedbackTemplate,
                        "feedbackResponders": feedbackResponders,
                        "businessProcessParameters": businessProcessParameters,
                        "descriptor": descriptor,
                        "id": id,
                    }
            
            feedbackResponders: MetaOapg.properties.feedbackResponders
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["feedbackAbout"]) -> 'FeedbackAbout2b4c8a6ca069100035b85907ae2c0002': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["feedbackConfidential"]) -> MetaOapg.properties.feedbackConfidential: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["feedbackOverallStatus"]) -> MetaOapg.properties.feedbackOverallStatus: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["showFeedbackProviderName"]) -> MetaOapg.properties.showFeedbackProviderName: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["requestDate"]) -> MetaOapg.properties.requestDate: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["expirationDate"]) -> MetaOapg.properties.expirationDate: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["feedbackQuestions"]) -> MetaOapg.properties.feedbackQuestions: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["feedbackTemplate"]) -> 'FeedbackTemplate2b4c8a6ca069100035b859a141200001': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["feedbackResponders"]) -> MetaOapg.properties.feedbackResponders: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["businessProcessParameters"]) -> 'BusinessProcessParameters2b4c8a6ca069100035b85907ae2c0000': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["descriptor"]) -> MetaOapg.properties.descriptor: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["feedbackAbout", "feedbackConfidential", "feedbackOverallStatus", "showFeedbackProviderName", "requestDate", "expirationDate", "feedbackQuestions", "feedbackTemplate", "feedbackResponders", "businessProcessParameters", "descriptor", "id", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["feedbackAbout"]) -> typing.Union['FeedbackAbout2b4c8a6ca069100035b85907ae2c0002', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["feedbackConfidential"]) -> typing.Union[MetaOapg.properties.feedbackConfidential, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["feedbackOverallStatus"]) -> typing.Union[MetaOapg.properties.feedbackOverallStatus, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["showFeedbackProviderName"]) -> typing.Union[MetaOapg.properties.showFeedbackProviderName, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["requestDate"]) -> typing.Union[MetaOapg.properties.requestDate, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["expirationDate"]) -> typing.Union[MetaOapg.properties.expirationDate, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["feedbackQuestions"]) -> typing.Union[MetaOapg.properties.feedbackQuestions, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["feedbackTemplate"]) -> typing.Union['FeedbackTemplate2b4c8a6ca069100035b859a141200001', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["feedbackResponders"]) -> MetaOapg.properties.feedbackResponders: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["businessProcessParameters"]) -> typing.Union['BusinessProcessParameters2b4c8a6ca069100035b85907ae2c0000', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["descriptor"]) -> typing.Union[MetaOapg.properties.descriptor, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["feedbackAbout", "feedbackConfidential", "feedbackOverallStatus", "showFeedbackProviderName", "requestDate", "expirationDate", "feedbackQuestions", "feedbackTemplate", "feedbackResponders", "businessProcessParameters", "descriptor", "id", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                feedbackResponders: typing.Union[MetaOapg.properties.feedbackResponders, list, tuple, ],
                feedbackAbout: typing.Union['FeedbackAbout2b4c8a6ca069100035b85907ae2c0002', schemas.Unset] = schemas.unset,
                feedbackConfidential: typing.Union[MetaOapg.properties.feedbackConfidential, bool, schemas.Unset] = schemas.unset,
                feedbackOverallStatus: typing.Union[MetaOapg.properties.feedbackOverallStatus, str, schemas.Unset] = schemas.unset,
                showFeedbackProviderName: typing.Union[MetaOapg.properties.showFeedbackProviderName, bool, schemas.Unset] = schemas.unset,
                requestDate: typing.Union[MetaOapg.properties.requestDate, str, date, schemas.Unset] = schemas.unset,
                expirationDate: typing.Union[MetaOapg.properties.expirationDate, str, date, schemas.Unset] = schemas.unset,
                feedbackQuestions: typing.Union[MetaOapg.properties.feedbackQuestions, list, tuple, schemas.Unset] = schemas.unset,
                feedbackTemplate: typing.Union['FeedbackTemplate2b4c8a6ca069100035b859a141200001', schemas.Unset] = schemas.unset,
                businessProcessParameters: typing.Union['BusinessProcessParameters2b4c8a6ca069100035b85907ae2c0000', schemas.Unset] = schemas.unset,
                descriptor: typing.Union[MetaOapg.properties.descriptor, str, schemas.Unset] = schemas.unset,
                id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_0':
                return super().__new__(
                    cls,
                    *args,
                    feedbackResponders=feedbackResponders,
                    feedbackAbout=feedbackAbout,
                    feedbackConfidential=feedbackConfidential,
                    feedbackOverallStatus=feedbackOverallStatus,
                    showFeedbackProviderName=showFeedbackProviderName,
                    requestDate=requestDate,
                    expirationDate=expirationDate,
                    feedbackQuestions=feedbackQuestions,
                    feedbackTemplate=feedbackTemplate,
                    businessProcessParameters=businessProcessParameters,
                    descriptor=descriptor,
                    id=id,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.all_of_0,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from workday_performance_enablement_python_sdk.model.business_process_parameters2b4c8a6ca069100035b85907ae2c0000 import BusinessProcessParameters2b4c8a6ca069100035b85907ae2c0000
from workday_performance_enablement_python_sdk.model.feedback_about2b4c8a6ca069100035b85907ae2c0002 import FeedbackAbout2b4c8a6ca069100035b85907ae2c0002
from workday_performance_enablement_python_sdk.model.feedback_responders_ffdd5de32f7f100016dbb1b188d70000 import FeedbackRespondersFfdd5de32f7f100016dbb1b188d70000
from workday_performance_enablement_python_sdk.model.feedback_template2b4c8a6ca069100035b859a141200001 import FeedbackTemplate2b4c8a6ca069100035b859a141200001
from workday_performance_enablement_python_sdk.model.requested_feedback_question_ffdd5de32f7f1000144df0c21e640000 import RequestedFeedbackQuestionFfdd5de32f7f1000144df0c21e640000
